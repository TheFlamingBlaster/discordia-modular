local t = {
['cmds'] = {
['mute'] = {
name = 'mute',
command = 'mute',
desc = 'Adds an autogenerated muted role to a user.',
func = function(m)
if m.mentionedUsers then

for i,v in pairs(m.mentionedUsers) do
local mem = m.guild:getMember(v.id)
fancy_embed(m,'Muted <@'..v.id..'>.')
mem:addRole(get_muted_role(m.guild))
end
end
end,
permissions = {'manageRoles'},
bot_permissions = {'mute_members'},
higher = true},

['unmute'] = {
name = 'unmute',
command = 'unmute',
desc = 'Removes the auto-generated muted role from a user.',
func = function(m)
if m.mentionedUsers then
local muted = get_muted_role(m.guild)
for i,v in pairs(m.mentionedUsers) do
    local mem = m.guild:getMember(v.id)
    if mem:hasRole(muted) then
        mem:removeRole(muted)
        fancy_embed(m,'Unmuted <@'..v.id..'>.')
    end
end
end
end,
permissions = {'manageRoles'},
bot_permissions = {'mutemembers'}   
},


['addperms'] = {
name = 'addperm',
command = 'addperm',
desc = 'Adds a bot-end permission.\nFor documentation on bot-ended permissions, head [here]({DOCS}).\nThis command is DANGEROUS, as anyone with permission can give themselves ANY PERMISSION IN THE BOT that doesn\'t require owner.',
func = function(m,args)
local role = get_role_by_name(m.guild,args[2])
if role then
    add_role_bot_permissions(role,m.guild,args[3])
    fancy_embed(m,"Applied permission "..args[3].." to "..role.name)
end
end,
permissions = {'administrator'},
bot_permissions = {'add_permissions'}
},
['removeperms'] = {
name = 'removeperm',
command = 'delperm',
desc = 'Removes a permission assigned to a role using {PREFIX}addperm.',
func = function(m,args)
local role = get_role_by_name(m.guild,args[2])
if role then
    remove_role_bot_permissions(role,m.guild,args[3])
    fancy_embed(m,"Removed permission "..args[3].." from "..role.name)
end
end,
permissions = {'administrator'},
bot_permissions = {'add_permissions'}
},

['toggle'] = {
name = 'toggle_perm_mode',
command = 'togglepermmode',
desc = 'Toggles weither the bot uses discord\'s default permissions or custom ones which can be assigned to each role.\nFor further documentation, contact the developer of this instance of Modular Bot.',
usage = '{PREFIX}togglepermmode',
func = function(m,args)
local guild = m.guild
local msg = m
local file = io.open("guilds.json","r")
if not file then
io.popen("call>guilds.json")
end
if file then
file:close()
end
        
local file = io.open("guilds.json","r")
local t 
local s,m = pcall(function() t=json.decode(file:read("*all"))  end)
if not t then
t = {}
end
if file then
file:close()
end

if not t[guild.id] then
    t[guild.id] = json.stringify({['bot_perm_mode'] = false})
end
local g = json.decode(t[guild.id])
if g['bot_perm_mode'] == false then
g['bot_perm_mode'] = true
else
g['bot_perm_mode'] = false
end
fancy_embed(msg,"Changed discord permission status to "..tostring(g['bot_perm_mode'])..' on this guild.\n(Users with Administrator are unaffected by this change.}')


t[guild.id] = json.stringify(g)
local nt = json.stringify(t)
local file = io.open("guilds.json","w")
file:write(nt)
file:close()

end,
permissions = {'administrator'},
bot_permissions = {'toggle_perm_mode'}
},

},
['type'] = 'command-lib'
}   



return t    